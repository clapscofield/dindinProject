{"ast":null,"code":"import * as types from './types';\nimport AuthService from \"../services/AuthService\";\nexport const loginUsuario = dados => ({\n  type: types.LOGIN,\n  payload: dados\n});\nexport const inserirGanho = entrada => ({\n  type: types.INSERIR_GANHO,\n  payload: entrada\n});\nexport const inserirGasto = saida => ({\n  type: types.INSERIR_GASTO,\n  payload: saida\n});\n/* MESSAGE ACTIONS */\n\nexport const setMessage = message => ({\n  type: types.SET_MESSAGE,\n  payload: message\n});\nexport const clearMessage = () => ({\n  type: types.CLEAR_MESSAGE\n});\n/* LOGIN ACTIONS */\n\nexport const register = usuario => dispatch => {\n  return AuthService.register(usuario).then(response => {\n    dispatch({\n      type: types.REGISTER_SUCCESS\n    });\n    dispatch({\n      type: types.SET_MESSAGE,\n      payload: response.data.message\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: types.REGISTER_FAIL\n    });\n    dispatch({\n      type: types.SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const login = (username, password) => dispatch => {\n  return AuthService.login(username, password).then(data => {\n    dispatch({\n      type: types.LOGIN_SUCCESS,\n      payload: {\n        user: data\n      }\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: types.LOGIN_FAIL\n    });\n    dispatch({\n      type: types.SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const logout = () => dispatch => {\n  AuthService.logout();\n  dispatch({\n    type: types.LOGOUT\n  });\n};","map":{"version":3,"sources":["/Users/clarissescofield/Desktop/2022.1/ES II/projeto-pratico/dindinProject/front/src/redux/actionCreators.js"],"names":["types","AuthService","loginUsuario","dados","type","LOGIN","payload","inserirGanho","entrada","INSERIR_GANHO","inserirGasto","saida","INSERIR_GASTO","setMessage","message","SET_MESSAGE","clearMessage","CLEAR_MESSAGE","register","usuario","dispatch","then","response","REGISTER_SUCCESS","data","Promise","resolve","error","toString","REGISTER_FAIL","reject","login","username","password","LOGIN_SUCCESS","user","LOGIN_FAIL","logout","LOGOUT"],"mappings":"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","sourcesContent":["import * as types from './types';\nimport AuthService from \"../services/AuthService\";\n\nexport const loginUsuario = (dados) => ({\n  type: types.LOGIN,\n  payload: dados\n})\n\nexport const inserirGanho = (entrada) => ({\n  type: types.INSERIR_GANHO,\n  payload: entrada\n})\n\nexport const inserirGasto = (saida) => ({\n  type: types.INSERIR_GASTO,\n  payload: saida\n})\n\n/* MESSAGE ACTIONS */\n\nexport const setMessage = (message) => ({\n  type: types.SET_MESSAGE,\n  payload: message,\n});\n\nexport const clearMessage = () => ({\n  type: types.CLEAR_MESSAGE,\n});\n\n\n\n/* LOGIN ACTIONS */ \nexport const register = (usuario) => (dispatch) => {\n  return AuthService.register(usuario).then(\n    (response) => {\n      dispatch({\n        type: types.REGISTER_SUCCESS,\n      });\n\n      dispatch({\n        type: types.SET_MESSAGE,\n        payload: response.data.message,\n      });\n\n      return Promise.resolve();\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString();\n\n      dispatch({\n        type: types.REGISTER_FAIL,\n      });\n\n      dispatch({\n        type: types.SET_MESSAGE,\n        payload: message,\n      });\n\n      return Promise.reject();\n    }\n  );\n};\n\nexport const login = (username, password) => (dispatch) => {\n  return AuthService.login(username, password).then(\n    (data) => {\n      dispatch({\n        type: types.LOGIN_SUCCESS,\n        payload: { user: data },\n      });\n\n      return Promise.resolve();\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString();\n\n      dispatch({\n        type: types.LOGIN_FAIL,\n      });\n\n      dispatch({\n        type: types.SET_MESSAGE,\n        payload: message,\n      });\n\n      return Promise.reject();\n    }\n  );\n};\n\nexport const logout = () => (dispatch) => {\n  AuthService.logout();\n\n  dispatch({\n    type: types.LOGOUT,\n  });\n};"]},"metadata":{},"sourceType":"module"}